skip_tags: true
clone_depth: 50

build: false

environment:
  # Undefining will run test from installation
  PYTEST_DIRECTIVES: --skip-slow

  matrix:
    - PYTHON_VERSION: 27
      SCIPY: "1.0"
    - PYTHON_VERSION: 35
      SCIPY: "1.1"
    - PYTHON_VERSION: 36
      NUMPY: "1.13"
    - PYTHON_VERSION: 37
      NUMPY: "1.14"

# follow pandas convention by only testing x64.  See comments in pandas'
# appveyor.yml file for how to run on x86
platform:
  - x64

install:
  # cancel older builds for the same PR
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
        throw "There are newer queued builds for this pull request, failing early." }

  #- pip install pytest pytest-xdist pytest-randomly matplotlib wheel
  #- pip install -r requirements.txt

build_script:
  # Search for [appveyor skip] or [skip appveyor] and exit if found in full commit message
  - ps: $commit=$env:APPVEYOR_REPO_COMMIT_MESSAGE + $env:APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED
  - ps: $skip_appveyor=$commit.Contains("[skip appveyor]") -Or $commit.Contains("[appveyor skip]")
  - ps: If ($skip_appveyor) { echo "[skip appveyor]"; Exit-AppVeyorBuild }

  # Show information about CPU running job to understand BLAS issues
  - wmic cpu get caption, name, numberofcores

  - SET MKL_NUM_THREADS=1
  - SET NUMEXPR_NUM_THREADS=1
  - SET OMP_NUM_THREADS=1
  - SET OPENBLAS_NUM_THREADS=1

  - If Defined PY_MAJOR_VER ( call ci\appveyor_conda.bat ) else ( call ci\appveyor_pip.bat )

  - pip install --upgrade pip
  - pip install pytest pytest-xdist pytest-randomly

  - python setup.py build_ext --inplace
  - if Defined PYTEST_DIRECTIVES ( python setup.py develop ) else ( python setup.py install )

  # run bdist_wheel so we can collect artifact to make available on PyPI
  - pip install wheel
  - python setup.py bdist_wheel

test_script:
  - python -c "import numpy as np; print(np.__version__); np.show_config()"
  - python -c "import scipy; print(scipy.__version__); scipy.show_config()"
  #- pytest sm2
  - call ci\run_test.bat

artifacts:
  - path: dist\*.whl
